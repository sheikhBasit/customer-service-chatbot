<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Chatbot Integration Examples</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        
        .container {
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        h1 { color: #333; margin-top: 0; }
        h2 { color: #0066cc; border-bottom: 2px solid #0066cc; padding-bottom: 10px; }
        
        .code-block {
            background: #282c34;
            color: #abb2bf;
            padding: 20px;
            border-radius: 8px;
            overflow-x: auto;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .chatbot-widget {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 380px;
            height: 500px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            display: flex;
            flex-direction: column;
            z-index: 1000;
        }
        
        .chat-header {
            background: #0066cc;
            color: white;
            padding: 15px;
            border-radius: 12px 12px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            background: #f8f9fa;
        }
        
        .message {
            margin-bottom: 12px;
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 80%;
            word-wrap: break-word;
        }
        
        .message.user {
            background: #0066cc;
            color: white;
            margin-left: auto;
        }
        
        .message.assistant {
            background: white;
            color: #333;
            border: 1px solid #e0e0e0;
        }
        
        .message.system {
            background: #fff3cd;
            color: #856404;
            text-align: center;
            font-size: 13px;
        }
        
        .typing-indicator {
            display: none;
            padding: 10px;
            color: #666;
            font-style: italic;
        }
        
        .chat-input-container {
            padding: 15px;
            border-top: 1px solid #e0e0e0;
            display: flex;
            gap: 10px;
        }
        
        .chat-input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }
        
        .send-button {
            background: #0066cc;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: 600;
        }
        
        .send-button:hover {
            background: #0052a3;
        }
        
        .send-button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .toggle-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            background: #0066cc;
            border-radius: 50%;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 999;
        }
        
        .toggle-button:hover {
            background: #0052a3;
        }
        
        .status {
            padding: 10px;
            border-radius: 6px;
            margin: 10px 0;
        }
        
        .status.success { background: #d4edda; color: #155724; }
        .status.error { background: #f8d7da; color: #721c24; }
        .status.info { background: #d1ecf1; color: #0c5460; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🤖 Custom Chatbot Integration Guide</h1>
        <p>Welcome! This guide shows you how to integrate the custom chatbot into your website.</p>
    </div>
    
    <div class="container">
        <h2>1. WebSocket Integration (Real-time)</h2>
        <p>Use WebSocket for real-time, bidirectional communication. Best for interactive chatbots.</p>
        
        <div class="code-block">
<pre>// WebSocket Integration Example
class ChatbotClient {
    constructor(apiKey, apiUrl = 'wss://your-api.com/api/v1/chatbot/ws') {
        this.apiKey = apiKey;
        this.apiUrl = apiUrl;
        this.ws = null;
        this.sessionToken = null;
        this.messageCallbacks = [];
    }
    
    connect(endUserId = null) {
        const url = `${this.apiUrl}?api_key=${this.apiKey}${endUserId ? `&end_user_id=${endUserId}` : ''}`;
        
        this.ws = new WebSocket(url);
        
        this.ws.onopen = () => {
            console.log('✅ Connected to chatbot');
        };
        
        this.ws.onmessage = (event) => {
            const message = JSON.parse(event.data);
            
            if (message.type === 'system') {
                this.sessionToken = message.session_token;
                console.log('Session token:', this.sessionToken);
            }
            
            // Call all registered callbacks
            this.messageCallbacks.forEach(cb => cb(message));
        };
        
        this.ws.onerror = (error) => {
            console.error('❌ WebSocket error:', error);
        };
        
        this.ws.onclose = () => {
            console.log('🔌 Disconnected from chatbot');
        };
    }
    
    sendMessage(content) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'query',
                content: content
            }));
        }
    }
    
    onMessage(callback) {
        this.messageCallbacks.push(callback);
    }
    
    disconnect() {
        if (this.ws) {
            this.ws.close();
        }
    }
}

// Usage
const chatbot = new ChatbotClient('your_api_key_here');
chatbot.connect();

chatbot.onMessage((message) => {
    if (message.type === 'response') {
        console.log('Bot:', message.content);
        // Display message in UI
    } else if (message.type === 'typing') {
        // Show/hide typing indicator
    }
});

// Send a message
chatbot.sendMessage('Hello, how can you help me?');</pre>
        </div>
    </div>
    
    <div class="container">
        <h2>2. REST API Integration (HTTP)</h2>
        <p>Use REST API for simpler integration or when WebSocket isn't available.</p>
        
        <div class="code-block">
<pre>// REST API Integration Example
class ChatbotRestClient {
    constructor(apiKey, apiUrl = 'https://your-api.com/api/v1/chatbot') {
        this.apiKey = apiKey;
        this.apiUrl = apiUrl;
        this.sessionToken = null;
    }
    
    async sendQuery(query, endUserId = null) {
        const params = new URLSearchParams({
            api_key: this.apiKey,
            query: query
        });
        
        if (this.sessionToken) {
            params.append('session_token', this.sessionToken);
        }
        
        if (endUserId) {
            params.append('end_user_id', endUserId);
        }
        
        try {
            const response = await fetch(`${this.apiUrl}/query?${params}`, {
                method: 'POST'
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            // Save session token for subsequent requests
            if (data.session_token) {
                this.sessionToken = data.session_token;
            }
            
            return data.response;
        } catch (error) {
            console.error('Error sending query:', error);
            throw error;
        }
    }
    
    async getHistory() {
        if (!this.sessionToken) {
            throw new Error('No active session');
        }
        
        const response = await fetch(
            `${this.apiUrl}/session/${this.sessionToken}/history?api_key=${this.apiKey}`
        );
        
        return await response.json();
    }
}

// Usage
const chatbot = new ChatbotRestClient('your_api_key_here');

async function chat() {
    try {
        const response = await chatbot.sendQuery('What services do you offer?');
        console.log('Bot:', response);
    } catch (error) {
        console.error('Chat error:', error);
    }
}</pre>
        </div>
    </div>
    
    <div class="container">
        <h2>3. Complete Widget Example</h2>
        <p>Ready-to-use chatbot widget that you can embed in any website.</p>
        
        <div class="code-block">
<pre>&lt;!-- Add this to your HTML --&gt;
&lt;div id="chatbot-widget"&gt;&lt;/div&gt;

&lt;script&gt;
(function() {
    const CHATBOT_CONFIG = {
        apiKey: 'your_api_key_here',
        apiUrl: 'wss://your-api.com/api/v1/chatbot/ws',
        brandColor: '#0066cc',
        chatbotName: 'Assistant',
        position: 'bottom-right' // or 'bottom-left'
    };
    
    class ChatWidget {
        constructor(config) {
            this.config = config;
            this.isOpen = false;
            this.client = new ChatbotClient(config.apiKey, config.apiUrl);
            this.init();
        }
        
        init() {
            this.createWidget();
            this.attachEventListeners();
            this.client.connect();
            this.client.onMessage(this.handleMessage.bind(this));
        }
        
        createWidget() {
            const container = document.getElementById('chatbot-widget');
            container.innerHTML = `
                &lt;button id="chat-toggle" class="toggle-button"&gt;💬&lt;/button&gt;
                &lt;div id="chat-window" class="chatbot-widget" style="display: none;"&gt;
                    &lt;div class="chat-header"&gt;
                        &lt;span&gt;${this.config.chatbotName}&lt;/span&gt;
                        &lt;button id="close-chat" style="background: none; border: none; color: white; font-size: 20px; cursor: pointer;"&gt;✕&lt;/button&gt;
                    &lt;/div&gt;
                    &lt;div id="chat-messages" class="chat-messages"&gt;&lt;/div&gt;
                    &lt;div class="typing-indicator" id="typing"&gt;Assistant is typing...&lt;/div&gt;
                    &lt;div class="chat-input-container"&gt;
                        &lt;input type="text" id="chat-input" class="chat-input" placeholder="Type a message..." /&gt;
                        &lt;button id="send-button" class="send-button"&gt;Send&lt;/button&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            `;
        }
        
        attachEventListeners() {
            document.getElementById('chat-toggle').onclick = () => this.toggle();
            document.getElementById('close-chat').onclick = () => this.close();
            document.getElementById('send-button').onclick = () => this.sendMessage();
            document.getElementById('chat-input').onkeypress = (e) => {
                if (e.key === 'Enter') this.sendMessage();
            };
        }
        
        toggle() {
            this.isOpen = !this.isOpen;
            const window = document.getElementById('chat-window');
            const toggle = document.getElementById('chat-toggle');
            window.style.display = this.isOpen ? 'flex' : 'none';
            toggle.style.display = this.isOpen ? 'none' : 'block';
        }
        
        close() {
            this.isOpen = false;
            document.getElementById('chat-window').style.display = 'none';
            document.getElementById('chat-toggle').style.display = 'block';
        }
        
        sendMessage() {
            const input = document.getElementById('chat-input');
            const message = input.value.trim();
            
            if (!message) return;
            
            this.addMessage('user', message);
            this.client.sendMessage(message);
            input.value = '';
        }
        
        handleMessage(message) {
            if (message.type === 'response') {
                this.addMessage('assistant', message.content);
            } else if (message.type === 'system') {
                this.addMessage('system', message.content);
            } else if (message.type === 'typing') {
                document.getElementById('typing').style.display = 
                    message.is_typing ? 'block' : 'none';
            }
        }
        
        addMessage(role, content) {
            const messagesDiv = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${role}`;
            messageDiv.textContent = content;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
    }
    
    // Initialize widget
    new ChatWidget(CHATBOT_CONFIG);
})();
&lt;/script&gt;</pre>
        </div>
    </div>
    
    <div class="container">
        <h2>4. React Integration</h2>
        <div class="code-block">
<pre>import React, { useState, useEffect, useRef } from 'react';

function Chatbot({ apiKey, apiUrl }) {
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [isConnected, setIsConnected] = useState(false);
    const [isTyping, setIsTyping] = useState(false);
    const wsRef = useRef(null);
    
    useEffect(() => {
        connectWebSocket();
        return () => {
            if (wsRef.current) {
                wsRef.current.close();
            }
        };
    }, []);
    
    const connectWebSocket = () => {
        const ws = new WebSocket(`${apiUrl}?api_key=${apiKey}`);
        
        ws.onopen = () => setIsConnected(true);
        
        ws.onmessage = (event) => {
            const message = JSON.parse(event.data);
            
            if (message.type === 'response' || message.type === 'system') {
                setMessages(prev => [...prev, {
                    role: message.type === 'system' ? 'system' : 'assistant',
                    content: message.content
                }]);
            } else if (message.type === 'typing') {
                setIsTyping(message.is_typing);
            }
        };
        
        ws.onclose = () => setIsConnected(false);
        wsRef.current = ws;
    };
    
    const sendMessage = () => {
        if (!input.trim() || !wsRef.current) return;
        
        setMessages(prev => [...prev, { role: 'user', content: input }]);
        wsRef.current.send(JSON.stringify({ type: 'query', content: input }));
        setInput('');
    };
    
    return (
        &lt;div className="chatbot"&gt;
            &lt;div className="messages"&gt;
                {messages.map((msg, i) => (
                    &lt;div key={i} className={`message ${msg.role}`}&gt;
                        {msg.content}
                    &lt;/div&gt;
                ))}
                {isTyping && &lt;div className="typing"&gt;Typing...&lt;/div&gt;}
            &lt;/div&gt;
            &lt;div className="input-area"&gt;
                &lt;input
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                    placeholder="Type a message..."
                /&gt;
                &lt;button onClick={sendMessage} disabled={!isConnected}&gt;
                    Send
                &lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    );
}</pre>
        </div>
    </div>
    
    <div class="container">
        <h2>📚 Additional Resources</h2>
        <ul>
            <li><strong>API Documentation:</strong> Full API reference with all endpoints</li>
            <li><strong>Rate Limits:</strong> Check your plan's rate limits in the dashboard</li>
            <li><strong>Usage Analytics:</strong> Monitor queries, tokens, and performance</li>
            <li><strong>Custom Branding:</strong> Customize colors, logo, and greeting message</li>
            <li><strong>Multi-language Support:</strong> Chatbot supports multiple languages</li>
        </ul>
        
        <div class="status info">
            <strong>💡 Pro Tip:</strong> Store your API key securely on your backend, not in client-side code for production apps!
        </div>
    </div>

    <script>
        // Demo WebSocket client for the documentation page
        class ChatbotClient {
            constructor(apiKey, apiUrl) {
                this.apiKey = apiKey;
                this.apiUrl = apiUrl;
                this.ws = null;
                this.sessionToken = null;
                this.messageCallbacks = [];
            }
            
            connect(endUserId = null) {
                const url = `${this.apiUrl}?api_key=${this.apiKey}${endUserId ? `&end_user_id=${endUserId}` : ''}`;
                this.ws = new WebSocket(url);
                
                this.ws.onopen = () => console.log('✅ Connected');
                this.ws.onmessage = (event) => {
                    const message = JSON.parse(event.data);
                    if (message.type === 'system') {
                        this.sessionToken = message.session_token;
                    }
                    this.messageCallbacks.forEach(cb => cb(message));
                };
                this.ws.onerror = (error) => console.error('❌ Error:', error);
                this.ws.onclose = () => console.log('🔌 Disconnected');
            }
            
            sendMessage(content) {
                if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                    this.ws.send(JSON.stringify({ type: 'query', content: content }));
                }
            }
            
            onMessage(callback) {
                this.messageCallbacks.push(callback);
            }
            
            disconnect() {
                if (this.ws) this.ws.close();
            }
        }
    </script>